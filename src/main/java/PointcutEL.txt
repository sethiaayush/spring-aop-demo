Pointcut Expression Language
https://www.eclipse.org/aspectj/doc/next/progguide/starting.html#starting-intro

execution
(modifier-pattern? --public //Optional
return-type-patter --void
declaring-type-pattern? //Optional
method-name-pattern(param-pattern) --addAccount() //Match any addAccount method from any class 
throws-pattern? //Optional
)
Example:@Before("execution(public void addAccount())")

1. ? says it is optional
2. Use * for wildcards

execution
(modifier-pattern? -- public
return-type-patter -- void
declaring-type-pattern? 
method-name-pattern(param-pattern) --add*() //Match any method from any class which starts with add, can be used to access setter and getters 
throws-pattern?
)
Example:@Before("execution(public void add*())")

execution
(modifier-pattern? -- *
return-type-patter -- *
declaring-type-pattern? 
method-name-pattern(param-pattern) --processCreditCard*() //Match any method from any class which starts with processCreditCard, can be used to access setter and getters 
throws-pattern?
)
Example:@Before("execution(* * processCreditCard*())")
Other form:@Before("execution(* processCreditCard*())")
this is because modifier-pattern? is Optional


Parameter Pattern Wildcards
For Param-pattern
1. ()      - matches a method with no arguments
2. (*)     - matches a method with one argument of any type
3. (..)    - matches a method with 0 or more arguments of any type

It supports &&, || and ! , behaves like short cut operation only and we can combine 2 expressions using them this way. Making them conditional if required.

For Example : 
@Pointcut("execution(* com.sethi.aayush.aopdemo.*.*(..))")
private void allMethodsInAOPDemo() {}

@Pointcut("execution(* com.sethi.aayush.aopdemo.*.get*(..))")
private void allGetterMethodsInAOPDemo() {}

@Pointcut("execution(* com.sethi.aayush.aopdemo.*.set*(..))")
private void allSetterMethodsInAOPDemo() {}

@Before("allMethodsInAOPDemo() && !(allGetterMethodsInAOPDemo() || allSetterMethodsInAOPDemo())")

Here private, public plays the role as they play for methods.
So you can access them from other class if they are public and other way as they are defined.
But you need to provide fully qualified name for it.

Ordering of Aspects can be done using @Order approach where you need to create different aspect classes where their methods will get invoked based on class order.
Negative nos are allowed, and lowest number wins.
i.e. -1 is winner when compared to 1 but 1 wins if compared with 2.
If 2 have same order then their run order is not definate, but they will run before higher order number and after lower order number.
